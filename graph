##邻接表的实现，字典
class Vertex:  ##顶点
    def __init__(self,key):
        self.id = key  #字符串
        self.connectedTo = {}##字典记录顶点与顶点之间的连接关系和权重
    def addNeighbor(self,nbr,weight=0):##添加从一个顶点到另一个顶点的连接
        self.connectedTo[nbr] = weight
    def __str__(self):
        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])
    def getConnections(self):
        return self.connectedTo.keys()
    def getId(self):
        return self.id
    def getWeight(self,nbr):
        return self.connectedTo[nbr]
        
        
class Graph:
    def __init__(self):
        self.vertList = {}
        self.numVertices = 0
    def addVertex(self,key):
        self.numVertices = self.numVertices + 1
        newVertex = Vertex(key)
        self.vertList[key] = newVertex
        return newVertex
    def getVertex(self,n):
        if n in self.vertList:
            return self.vertList[n]
        else:
            return None
    def __contains__(self,n):
        return n in self.vertList
    def addEdge(self,f,t,cost=0):
        if f not in self.vertList:
            nv = self.addVertex(f)
        if t not in self.vertList:
            nv = self.addVertex(t)
            self.vertList[f].addNeighbor(self.vertList[t], cost)
    def getVertices(self):
        return self.vertList.keys()
    def __iter__(self):
        return iter(self.vertList.values())
        
        
##广度优先搜索BFS
from pythonds.graphs import Graph,Vertex
from pythonds.basic import Queue
    def bfs(g,start):
        start.setDistance(0)##距离
        start.setPred(None)##设置颜色，灰色，黑色，白色
        vertQueue = Queue()
        vertQueue.enqueue(start)
    while (vertQueue.size() > 0):
        currentVert = vertQueue.dequeue()
        for nbr in currentVert.getConnections():
            if (nbr.getColor() == 'white'):
                nbr.setColor('gray')
                nbr.setDistance(currentVert.getDistance() + 1)
                nbr.setPred(currentVert)
                vertQueue.enqueue(nbr)
                
##DFS深度优先搜索

##广度优先搜索是一次建立搜索树的一层。而DFS深度优先搜索则是尽可能深的搜索树的一支。
