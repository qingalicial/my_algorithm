##1 冒泡排序
######第一次遍历比较n-1次数据，第二次遍历比较n-2次，O（n^2）；低端的排序方法
# -*- coding:utf-8-*-
def bubbleSort(alist):
    for passnum in range(len(alist)-1,0,-1):   ##逆序输出，6,5,4,3,2,1
        for i in range(passnum):
            if alist[i]>alist[i+1]:
                temp=alist[i]
                alist[i]=alist[i+1]
                alist[i+1]=temp

alist =[52,26,93,17,77,31,44,55,20]
bubbleSort(alist)
print(alist)
##改良版冒泡法，短路冒泡排序：如果一个列表只需要几次遍历就可以排好
def shortBubbleSort(alist):
    exchanges=True
    passnum=len(alist)-1
    while passnum > 0 and exchanges:
        exchanges=False
        for i in range(passnum):
            if alist[i]>alist[i+1]:
                print i,alist[i],alist[i+1]
                exchanges=True
                temp=alist[i]
                alist[i]=alist[i+1]
                alist[i+1]=temp
        passnum=passnum-1

list =[52,26,93,17,77,31,44,55,20]
shortBubbleSort(list)
print(list)


##2 选择排序
####每遍历一次只交换一次数据，即进行一次遍历时找到最大的项。完成遍历后再把它换到正确的位置
def selectionSort(alist):
    for fillslot in range(len(alist)-1,0,-1):
        positionOfMax=0
        for location in range(1,fillslot+1):
            if alist[location]>alist[positionOfMax]:
                positionOfMax=location
        temp=alist[fillslot]
        alist[fillslot]=alist[positionOfMax]
        alist[positionOfMax]=temp



alist=[54,26,93,17,77,31,44,55,20]
selectionSort(alist)
print alist 

###3 插入排序
##复杂度O(n^2),总是保持一个位置靠前的已经排好的子表，然后每一个新数据项被插入到前边的子表def insertionSort(alist):
    for index in range(1,len(alist)):
        currentvalue=alist[index]
        position=index
        while position > 0 and alist[position-1]>currentvalue:
            alist[position]=alist[position-1]
            position=position-1
            alist[position]=currentvalue
            print alist,currentvalue
            
list =[52,26,93,17,77,31,44,55,20]
insertionSort(list)
print(list)


##4 希尔排序





















               
